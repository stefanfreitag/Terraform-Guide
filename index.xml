<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>My Terraform Learnings on My Terraform learnings</title><link>https://stefanfreitag.github.io/Terraform-Guide/</link><description>Recent content in My Terraform Learnings on My Terraform learnings</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://stefanfreitag.github.io/Terraform-Guide/index.xml" rel="self" type="application/rss+xml"/><item><title>Module structure</title><link>https://stefanfreitag.github.io/Terraform-Guide/docs/recommeded_practices/module_structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stefanfreitag.github.io/Terraform-Guide/docs/recommeded_practices/module_structure/</guid><description>When writing Terraform modules it is good to follow established standards. Hashicorp publishes for the different Terraform versions a recommended aka standard module structure.
Here a brief overview
Root Module examples/ Contains examples of using the module. Each example should have a README to explain the goal and usage of the example. main.tf The primary entrypoint. Simple module: this may be where all the resources are created. Complex module: resource creation may be split into multiple files but any nested module calls should be in the main file.</description></item><item><title>State Management</title><link>https://stefanfreitag.github.io/Terraform-Guide/docs/recommeded_practices/state_management/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stefanfreitag.github.io/Terraform-Guide/docs/recommeded_practices/state_management/</guid><description> Using AWS Services # When working in a team there is a general need for a remote state. One of the common approaches is to store the state in an AWS S3 bucket. In addition to the S3 bucket, a DynamoDB table is used to provide a locking mechanism.
Details on setting up those resources are below:
The state should be encrypted. Versioning should be enabled.</description></item><item><title>terraform-docs</title><link>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/terraform-docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/terraform-docs/</guid><description>In one sentence # A tool to generate documentation for Terraform modules in output formats like Markdown.
Installation # The latest version can be downloaded from the Github releaes page.
Linux curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/v0.16.0/terraform-docs-v0.16.0-linux-amd64.tar.gz tar -xzf terraform-docs.tar.gz sudo chmod +x ./terraform-docs sudo chown root: ./terraform-docs sudo mv terraform-docs /usr/local/bin/terraform-docs Usage # terraform-docs can be executed stand alone or integrated into other tools like pre-commit.
Stand alone # One of the common approaches is render the documenation as Markdown and add it to the README.</description></item><item><title>terrascan</title><link>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/terrascan/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/terrascan/</guid><description> Installation # curl -L &amp;#34;$(curl -s https://api.github.com/repos/accurics/terrascan/releases/latest | grep -o -E &amp;#34;https://.+?_Linux_x86_64.tar.gz&amp;#34;)&amp;#34; &amp;gt; terrascan.tar.gz tar -xf terrascan.tar.gz terrascan &amp;amp;&amp;amp; rm terrascan.tar.gz sudo install terrascan /usr/local/bin &amp;amp;&amp;amp; rm terrascan Usage # Execution
terrascan init terrascan scan Scanning of Terraform HCL2 files for AWS resources
terrascan scan -t aws</description></item><item><title>tflint</title><link>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/tflint/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/tflint/</guid><description>Find possible errors (like invalid instance types) for Major Cloud providers (AWS/Azure/GCP). Warn about deprecated syntax, unused declarations. Enforce best practices, naming conventions.
Installation # $ curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash arch=amd64 os=linux_amd64 ==================================================== Looking up the latest version ... Downloading TFLint v0.45.0 Downloaded successfully ==================================================== Unpacking /tmp/tflint.b2bXR2dwTh/tflint.zip ... Archive: /tmp/tflint.b2bXR2dwTh/tflint.zip inflating: /tmp/tflint.b2bXR2dwTh/tflint Installing /tmp/tflint.b2bXR2dwTh/tflint to /usr/local/bin/ ... &amp;#39;/tmp/tflint.b2bXR2dwTh/tflint&amp;#39; -&amp;gt; &amp;#39;/usr/local/bin/tflint&amp;#39; Cleaning temporary downloaded files directory /tmp/tflint.b2bXR2dwTh ... ==================================================== Current tflint version TFLint version 0.</description></item><item><title>tfsec</title><link>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/tfsec/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/tfsec/</guid><description>tfsec is a static code analyzer provided by Aqua Security.
Installation # Download using the provided install.sh script
curl -s https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash Checking the installed tfsec version
$ tfsec --version v1.28.1 Usage # From the command line execute
$ tfsec timings ────────────────────────────────────────── disk i/o 43.624µs parsing 4.783863ms adaptation 93.453µs checks 2.397983ms total 7.318923ms counts ────────────────────────────────────────── modules downloaded 0 modules processed 1 blocks processed 30 files read 6 results ────────────────────────────────────────── passed 5 ignored 0 critical 0 high 0 medium 0 low 0 No problems detected!</description></item><item><title>tfswitch</title><link>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/tfswitch/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://stefanfreitag.github.io/Terraform-Guide/docs/tools/tfswitch/</guid><description>The tfswitch command line tool lets you switch between different versions of Terraform. This is very useful when working on multiple projects.
Installation # Download using the provided install.sh script
$ curl -L https://raw.githubusercontent.com/warrensbox/terraform-switcher/release/install.sh | sudo bash % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 9159 100 9159 0 0 38162 0 --:--:-- --:--:-- --:--:-- 38162 warrensbox/terraform-switcher info checking GitHub for latest tag warrensbox/terraform-switcher info found version: 0.</description></item></channel></rss>